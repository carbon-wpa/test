// Define custom series type for displaying low/med/high values using boxplot as a base
Highcharts.seriesType('lowmedhigh', 'boxplot', {
  keys: ['low', 'high'],
  tooltip: {
    pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: ' +
      'Low <b>{point.low}</b> - High <b>{point.high}</b><br/>'
  }
}, {
  // Change point shape to a line with three crossing lines for low/median/high
  // Stroke width is hardcoded to 1 for simplicity
  drawPoints: function () {
    var series = this;
    this.points.forEach(function (point) {
      
      
      var graphic = point.graphic,
        verb = graphic ? 'animate' : 'attr',
        shapeArgs = point.shapeArgs,
        width = shapeArgs.width,
        left = Math.floor(shapeArgs.x) + 0.5,
        right = left + width,
        crispX = left + Math.round(width / 2) + 0.5,
        highPlot = Math.floor(point.highPlot) + 0.5,
        // Sneakily draw low marker even if 0
        lowPlot = Math.floor(point.lowPlot) +
          0.5 - (point.low === 0 ? 1 : 0);

      if (point.isNull) {
        return;
      }

      if (!graphic) {
        point.graphic = graphic = series.chart.renderer.path('point').add(series.group);
      }

     if(series.name === 'Benchmark'){
        graphic.attr({
        stroke: point.color || series.color,
        "stroke-width": 1
      });
      
      graphic[verb]({
        d: [
        'M', left, highPlot,
          'H', right,
          'H', right,
          'M', left, lowPlot,
          'H', right,
          'M', crispX, highPlot,
          'V', lowPlot
        ]
      });
       return;
      } 

      
       graphic.attr({
        stroke: point.color || series.color,
        "stroke-width": 5
      });
      
      graphic[verb]({
        d: [
          'M', left, highPlot,
          'M', left, lowPlot,
          'M', crispX, highPlot,
          'V', lowPlot
        ]
      });
      
      
      
    });
  }
});

// Create chart
var chart = Highcharts.chart('container', {
  chart: {
    type: 'lowmedhigh'
  },

  title: {
    text: 'Daily company fruit consumption 2019'
  },

  accessibility: {
    point: {
      descriptionFormatter: function (point) {
        // Use default formatter for null points
        if (point.isNull) {
          return false;
        }

        return point.category + ', low ' + point.low + ', high ' + point.high;
      }
    },

    series: {
      descriptionFormatter: function (series) {
        return series.name + ', series ' + (series.index + 1) + ' of ' +
          series.chart.series.length + ' with ' + series.points.length +
          ' data points.';
      }
    },

    typeDescription: 'Low, median, high. Each data point has a low, median and high value, depicted vertically as small ticks.' // Describe the chart type to screen reader users, since this is not a traditional boxplot chart
  },

  xAxis: [{
    accessibility: {
      description: 'Months of the year'
    },
    categories: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    crosshair: true
  }],

  yAxis: {
    title: {
      text: 'Fruits consumed'
    },
    min: 0
  },

  responsive: {
    rules: [{
      condition: {
        maxWidth: 550
      },
      chartOptions: {
        xAxis: {
          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        }
      }
    }]
  },

  tooltip: {
    shared: true
  },

  plotOptions: {
  },

  series: [{
    name: 'Benchmark',
    color: '#000000',
    data: [
      [0, 19],
      [1, 23],
      [3, 28],
      [2, 28],
      [1, 27],
      [0, 21],
      null,
      null,
      [1, 19],
      [2, 21],
      [2, 22],
      [1, 19]
    ]
  }, {
    name: 'Bananas',
    data: [
      [0, 6],
      [1, 4],
      [0, 5],
      [2, 5],
      [1, 6],
      [0, 3],
      [1, 2],
      [0, 3],
      [1, 3],
      [0, 4],
      [1, 5],
      [1, 5]
    ]
  }, {
    name: 'Apples',
    data: [[6, 9]]
  }]
});

// Remove click events on container to avoid having "clickable" announced by AT
// These events are needed for custom click events, drag to zoom, and navigator
// support.
chart.container.onmousedown = null;
chart.container.onclick = null;
